-- This program should just typecheck correctly


-- -- -- Normal kind examples

interface Semigroup (~A : Type) {
  plus : ~A -> ~A -> ~A;;
};;

interface Monoid (~A : Type) implies Semigroup {
  zero : ~A;;
};;

impl Int for Semigroup {
  plus := plusInt;;
};;

impl Int for Monoid {
  zero := 0;;
};;

impl ~A is Semigroup | Option ~A for Semigroup {
  plus None _ := None;;
  plus _ None := None;;
  plus (Some a) (Some b) := Some (plus a b);;
};;

-- -- -- Higher kind examples

interface Endofunctor (~F : Type -> Type) {
  map : (~A -> ~B) -> ~F ~A -> ~F ~B;;
};;

interface AppFunctor (~AF : Type -> Type) implies Endofunctor {
  unit : ~A -> ~AF ~A;;
  ap : ~AF (~A -> ~B) -> ~AF ~A -> ~AF ~B;;
};;

interface Monad (~M : Type -> Type) implies AppFunctor {
  bind : ~M ~A -> (~A -> ~M ~B) -> ~M ~B;;
};;

impl Option for Endofunctor {
  map _ None := None;;
  map f (Some a) := Some (f a);;
};;

impl Option for AppFunctor {
  unit := Some;;
  ap _ None := None;;
  ap None _ := None;;
  ap (Some f) (Some a) := Some (f a);;
};;

impl Option for Monad {
  bind None _ := None;;
  bind (Some a) f := f a;;
};;

comp f g x := f (g x);;
fst (Pair a _) := a;;
snd (Pair _ a) := a;;

newtype StateT (~S : Type) (~M : Type -> Type) (~A : Type) := State (~S -> ~M (Pair ~S ~A));;
runStateT (State s) := s;;

impl ~M is Monad | StateT ~S ~M for Endofunctor {
  map f (State sf) :=
    State (\s -> bind (sf s) (\(Pair s a) -> unit (Pair s (f a))));;
};;

impl ~M is Monad | StateT ~S ~M for AppFunctor {
  unit x :=  State (\s -> unit (Pair s x));;
  ap (State f) (State k) := State (\s -> for
    { fp <- f s
    | kp <- k (fst fp)
    } unit (Pair (fst kp) ((snd fp) (snd kp)))
    );;
};;

impl ~M is Monad | StateT ~S ~M for Monad {
  bind (State m) f := State (\s -> for
    { mp <- m s
    } runStateT (f (snd mp)) (fst mp)
    );;
};;


newtype Id (~A : Type) := Id ~A;;
impl Id for Endofunctor { map f (Id x) := Id (f x);; };;
impl Id for AppFunctor { unit := Id;; ap (Id f) (Id x) := Id (f x);; };;
impl Id for Monad { bind (Id x) f := f x;; };;

runId (Id x) := x;;

get := State (\s -> unit (Pair s s));;
put x := State (\s -> unit (Pair x 0));;


-- Finito

testInheritance : ~A is Monoid | ~A -> ~A;;
testInheritance x := plus x zero;; -- implicitly knows about semigroup impl

main := const 42 (fix error);;
