comp f g x := f (g x);;
fst (Pair a _) := a;;
snd (Pair _ a) := a;;

newtype Unit := Unit;;

interface Endofunctor (~F : Type -> Type) {
  map : (~A -> ~B) -> ~F ~A -> ~F ~B;;
};;

interface AppFunctor (~F : Type -> Type) implies Endofunctor {
  unit : ~A -> ~F ~A;;
  ap : ~F (~A -> ~B) -> ~F ~A -> ~F ~B;;
};;

interface Monad (~F : Type -> Type) implies AppFunctor {
  bind : ~F ~A -> (~A -> ~F ~B) -> ~F ~B;;
};;

newtype StateT (~S : Type) (~M : Type -> Type) (~A : Type) := State (~S -> ~M (Pair ~S ~A));;
runStateT : ~M is Monad | StateT ~S ~M ~A -> ~S -> ~M (Pair ~S ~A);;
runStateT (State sss) := sss;;
evalStateT : ~M is Monad | StateT ~S ~M ~A -> ~S -> ~M ~A;;
evalStateT s xst := map snd (runStateT s xst);;
execStateT : ~M is Monad | StateT ~S ~M ~A -> ~S -> ~M ~S;;
execStateT s xsc := map fst (runStateT s xsc);;

impl ~M is Monad | StateT ~S ~M for Endofunctor {
  map f (State sf) :=
    State (\s -> bind (sf s) (\(Pair s a) -> unit (Pair s (f a))));;
};;

impl ~M is Monad | StateT ~S ~M for AppFunctor {
  unit x :=  State (\s -> unit (Pair s x));;
  ap (State fs) (State k) := State (\s -> for
    { fp <- fs s
    | kp <- k (fst fp)
    } unit (Pair (fst kp) ((snd fp) (snd kp)))
    );;
};;

impl ~M is Monad | StateT ~S ~M for Monad {
  bind (State m) f := let m2 := m in State (\s -> for
    { mp <- m2 s
    } runStateT (f (snd mp)) (fst mp)
    );;
};;


newtype Id (~A : Type) := Id ~A;;
runId (Id xr) := xr;;
newtype IdT (~M : Type -> Type) (~A : Type) := IdT (~M ~A);;
runIdT : ~M is Monad | IdT ~M ~A -> ~M ~A;;
runIdT (IdT i) := i;;
impl Id for Endofunctor { map f (Id imx) := Id (f imx);; };;
impl Id for AppFunctor { unit := Id;; ap (Id f) (Id xaa) := Id (f xaa);; };;
impl Id for Monad { bind (Id ibx) f := f ibx;; };;

impl ~M is Monad | IdT ~M for Endofunctor { map f (IdT mx) := IdT (map f mx);; };;
impl ~M is Monad | IdT ~M for AppFunctor {
  unit ux := IdT (unit ux);;
  ap (IdT f) (IdT ax) := IdT (for {ff <- f | xx <- ax} unit (ff xx));;
};;
impl ~M is Monad | IdT ~M for Monad {
  bind (IdT bx) f := IdT (bind bx (\xx -> runIdT (f xx)));;
};;

newtype OptionT (~M : Type -> Type) (~A : Type) := OptionT (~M (Option ~A));;
runOptionT (OptionT x) := x;;

impl Option for Endofunctor {
  map f (Some x) := Some (f x);;
  map _ _ := None;;
};;

impl ~M is Monad | OptionT ~M for Endofunctor {
  map f (OptionT m) := OptionT (map (map f) m);;
};;
impl ~M is Monad | OptionT ~M for AppFunctor {
  unit := comp (comp OptionT unit) Some;;
  ap f a := OptionT ( bind (runOptionT f) (\ff -> match ff with
    | None -> unit None
    | Some fff -> bind (runOptionT a) (\aa -> match aa with
      | None -> unit None
      | Some aaa -> unit (Some (fff aaa))
      )
    )
  );;
};;
impl ~M is Monad | OptionT ~M for Monad {
  bind m f := OptionT ( bind (runOptionT m) (\mm -> match mm with
    | None -> unit None
    | Some mmm -> runOptionT (f mmm)
    )
  );;
};;

failStateT : ~M is Monad | StateT ~S (OptionT ~M) ~A;;
failStateT := State (\s -> OptionT (unit None));;

get : ~M is Monad | StateT ~S ~M ~S;;
get := State (\s -> unit (Pair s s));;
put : ~M is Monad | ~S -> StateT ~S ~M Unit;;
put px := State (\s -> unit (Pair px Unit));;

lift2 : ~M is AppFunctor | (~A -> ~B -> ~C) -> ~M ~A -> ~M ~B -> ~M ~C;;
lift2 f a b := ap (map f a) b;;

forM : ~M is AppFunctor | List ~A -> (~A -> ~M ~B) -> ~M (List ~B);;
forM Nil _ := unit Nil;;
forM (Cons h t) f := lift2 Cons (f h) (forM t f);;

range 0 := Nil;;
range n := Cons n (range (minusInt n 1));;

fib : Int -> StateT (Pair Int Int) (OptionT Id) Int;;
fib n := if ltInt n 0 then failStateT else for
{ void <- forM (range n) (const (for
  { p <- get
  } put (Pair (snd p) (plusInt (fst p) (snd p)))
  ))
} map fst get
;;

testfibo n := runId (runOptionT (evalStateT (fib n) (Pair 0 1)));;

main := testfibo 10;;